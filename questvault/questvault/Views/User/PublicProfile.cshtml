@model questvault.Models.FriendsViewData

@{
  ViewData["Title"] = "Profile";
  ViewData["help_Text"] = @"
       This is a public user profile. <br/>
       In this page you can see the profile of user with all the information avaliable <br/>
       You can send a friend request so you can stay conected (if he ever comes outside, he will see it)!";
  var user = await UserManager.GetUserAsync(User);
  var userAvatar = (Model.user != null && Model.user.ProfilePhotoPath != null) ? Model.user.ProfilePhotoPath : "user.svg";
}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<body class="profile">

  <section class="profile-banner d-flex align-items-center">

    <div class="container-fluid d-flex align-items-center justify-content-center mt-3">

      @* Avatar *@
      <div class="d-flex align-items-center justify-content-center user-foto profile-avatar">
        <img src="~/img/usr_profile/@userAvatar" alt="Key Icon" class="@(userAvatar == "user.svg" ? "p-4" : "")">
      </div>

      <div class="d-flex row ms-3 align-items-center col-7">
        <div class="profile-details d-inline-flex mb-4">
          <div class="col-2">
            @* Username *@
            <h4 style="color: white" class="profile-username">@Model.user.UserName</h4>
            @if (Model.user.Clearance == 1)
            {
              <h6 style="text-decoration:underline" class="profile-role">Moderator</h6>
            }
            else if (Model.user.Clearance == 2)
            {
              <h6 style="text-decoration:underline" class="profile-role">Administrator</h6>
            }
            else
            {
              <h6 style="visibility: hidden" class="profile-role">.</h6>
            }
          </div>

          @* Friend Request *@
          @if (User.Identity.Name != Model.user.UserName)
          {
            if (Model.RequestSent)
            {
              <h5 style="color:white; text-align: center; width:10rem">A request has been sent!</h5>
            }
            else if (Model.RequestRecieved)
            {
              <a asp-controller="User" asp-action="AcceptFriendRequest" asp-route-id="@Model.user.Id" style="text-decoration: none; width: 12.5rem;" class="btn-primary nav-btn-2 ms-3">
                <img class="nav-vector pe-1" style="filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(139deg) brightness(108%) contrast(101%);" src="~/img/vector/plus-solid.svg" alt="Plus Icon" />
                Accept Request
              </a>
              <a asp-controller="User" asp-action="RejectFriendRequest" asp-route-id="@Model.user.Id" style="text-decoration: none; width: 12.5rem;" class="btn-primary nav-btn-2 ms-3">
                <img class="nav-vector pe-1" style="filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(139deg) brightness(108%) contrast(101%);" src="~/img/vector/circle-xmark-solid.svg" alt="Deny Icon" />
                Deny Request
              </a>
            }
            else if (!Model.friends)
            {
              <a asp-controller="User" asp-action="SendFriendRequest" asp-route-id="@Model.user.Id" style="text-decoration: none" class="btn-primary nav-btn-2 ms-3">
                <img class="nav-vector pe-1" style="filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(139deg) brightness(108%) contrast(101%);" src="~/img/vector/plus-solid.svg" alt="Plus Icon" />
                Add Friend
              </a>
            }
            else if (Model.friends)
            {
              <a asp-controller="User" asp-action="RemoveFriend" asp-route-id="@Model.user.Id" style="text-decoration: none; width: 12.5rem;" class="btn-primary nav-btn-2 ms-3"
                onclick="return confirm('Are you sure you to remove @Model.user.UserName from your friends?')">
                <img class="nav-vector pe-1" style="filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(139deg) brightness(108%) contrast(101%);" src="~/img/vector/heart-crack-solid.svg" alt="Heart crack Icon" />
                Remove Friend
              </a>
            }
          }

          @* User library *@
          <a asp-controller="Library" asp-action="UserLibrary" asp-route-id="@Model.user.UserName" style="text-decoration: none; width: 12.5rem;" class="btn-primary nav-btn-2 ms-3">
            <img class="nav-vector pe-1" style="filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(139deg) brightness(108%) contrast(101%);" src="~/img/vector/bookmark.svg" alt="Bookmark Icon" />
            Library
          </a>

          @* Admin Actions *@
          @if (user.Clearance == 2 && User.Identity.Name != Model.user.UserName)
          {
            @if (Model.user.Clearance < 2 && !Model.user.LockoutEnabled)
            {
              <a onclick="return confirm('Are you sure you want to Lockout @Model.user.UserName?')"
                 class="btn btn-primary btn-remove ms-3" asp-controller="Backoffice" asp-action="LockoutUser" asp-route-id="@Model.user.Id">Lockout User</a>
            }
            @if (Model.user.LockoutEnabled)
            {
              <a onclick="return confirm('Are you sure you want to remove @Model.user.UserName's Lockout?')"
                 class="btn btn-primary nav-btn-2 ms-3" style="width: 12.5rem" asp-controller="Backoffice" asp-action="RemoveLockoutUser" asp-route-id="@Model.user.Id">Remove Lockout</a>
            }
            else{
              @if (Model.user.Clearance != 2)
              {
                <a onclick="return confirm('Are you sure you make @Model.user.UserName an Administrator?')"
                   class="btn btn-primary nav-btn ms-3 btn-profile" asp-controller="Backoffice" asp-action="GiveAdmin" asp-route-id="@Model.user.Id">Make Admin</a>
              }
              @if (Model.user.Clearance == 0)
              {
                <a onclick="return confirm('Are you sure you make @Model.user.UserName a Moderator?')"
                   class="btn btn-primary nav-btn ms-3 btn-profile" asp-controller="Backoffice" asp-action="GiveModerator" asp-route-id="@Model.user.Id">Make Mod</a>
              }
              @if (Model.user.Clearance == 1)
              {
                <a onclick="return confirm('Are you sure you remove @Model.user.UserName from being a Moderator?')"
                   class="btn btn-primary nav-btn-2 ms-3 " asp-controller="Backoffice" asp-action="RemovePermissions" asp-route-id="@Model.user.Id">Remove Mod</a>
              }
              }
          }

         
        </div>
        <div class="row container-fluid">

        </div>
        <div class="profile-connects row container-fluid">
          <img class="img-size-sm" src="~/img/external/Steam_Logo.png" alt="Steam Logo" />
        </div>
      </div>

      <div class="profile-stats container justify-content-end col">
        @* <h4 style="color: white" class="profile-hours">Rating average: @Model.RatingAverage</h4> *@
        <h4 style="color: white" class="profile-games-played">@Model.nJogosTotal games in library</h4>

        <h6 style="color: white" class="profile-games-backed">@Model.nJogosPlaying Playing</h6>
        <h6 style="color: white" class="profile-games-backed">@Model.nJogosComplete Complete</h6>
        <h6 style="color: white" class="profile-games-backed">@Model.nJogosRetired Retired</h6>
        <h6 style="color: white" class="profile-games-backed">@Model.nJogosBacklogged Backlogged</h6>
        <h6 style="color: white" class="profile-games-backed">@Model.nJogosAbandoned Abandoned</h6>
        <h6 style="color: white" class="profile-games-backed">@Model.nJogosWishlist Whishlisted</h6>
      </div>
    </div>
  </section>
  <section class="profile-about ">
    <div class="d-flex justify-content-between">
      <div class="profile-bio">
        <div>
          <canvas style="width:40rem; height:20rem" id="averageRatingChart"></canvas>
        </div>
      </div>
      <div class="profile-top5">
        <partial name="_Top5" for="@ViewData["Top5"] as List<GameLog>" />
      </div>
    </div>
  </section>
</body>

<script>
  const ctx = document.getElementById('averageRatingChart');

  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['1 Star', '2 Stars', '3 Stars', '4 Stars', '5 Stars'],
      datasets: [{
        label: 'Ratings',
        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ratingCountList)),
        backgroundColor: ['rgba(152, 0, 141,0.2)'],
        borderColor: ['rgba(152, 0, 141,1)'],
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            stepSize: 1,
            color: 'white'
          },
          grid: {
            color: 'rgba(255, 255, 255, 0.1)' // Ajusta para uma cor branca mais subtil para a grade
          }
        },
        x: {
          ticks: {
            color: 'white'
          },
          grid: {
            color: 'rgba(255, 255, 255, 0.1)' // Mesma cor sutil para o eixo X
          }
        }
      },
      plugins: {
        legend: {
          labels: {
            color: 'white' // Ajusta a cor da legenda para branco
          }
        }
      }
    }
  });
</script>
