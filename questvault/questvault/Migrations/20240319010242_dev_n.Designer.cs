// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using questvault.Data;

#nullable disable

namespace questvault.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240319010242_dev_n")]
    partial class dev_n
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("questvault.Models.Company", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IgdbCompanyId")
                        .HasColumnType("bigint");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1L,
                            CompanyName = "Electronic Arts",
                            IgdbCompanyId = 1L
                        },
                        new
                        {
                            CompanyId = 8L,
                            CompanyName = "2K Games",
                            IgdbCompanyId = 8L
                        },
                        new
                        {
                            CompanyId = 13L,
                            CompanyName = "Demiurge Studios",
                            IgdbCompanyId = 13L
                        },
                        new
                        {
                            CompanyId = 24L,
                            CompanyName = "Sierra Entertainment",
                            IgdbCompanyId = 24L
                        },
                        new
                        {
                            CompanyId = 29L,
                            CompanyName = "Rockstar Games",
                            IgdbCompanyId = 29L
                        },
                        new
                        {
                            CompanyId = 38L,
                            CompanyName = "Ubisoft Montreal",
                            IgdbCompanyId = 38L
                        },
                        new
                        {
                            CompanyId = 50L,
                            CompanyName = "WB Games",
                            IgdbCompanyId = 50L
                        },
                        new
                        {
                            CompanyId = 56L,
                            CompanyName = "Valve",
                            IgdbCompanyId = 56L
                        },
                        new
                        {
                            CompanyId = 104L,
                            CompanyName = "Ubisoft Entertainment",
                            IgdbCompanyId = 104L
                        },
                        new
                        {
                            CompanyId = 126L,
                            CompanyName = "Bethesda Game Studios",
                            IgdbCompanyId = 126L
                        });
                });

            modelBuilder.Entity("questvault.Models.Friendship", b =>
                {
                    b.Property<string>("User1Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("User2Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("User1Id", "User2Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Friendship");
                });

            modelBuilder.Entity("questvault.Models.FriendshipRequest", b =>
                {
                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FriendshipDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAccepted")
                        .HasColumnType("bit");

                    b.HasKey("SenderId", "ReceiverId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("FriendshipRequest");
                });

            modelBuilder.Entity("questvault.Models.Game", b =>
                {
                    b.Property<long>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GameId"));

                    b.Property<long>("IgdbId")
                        .HasColumnType("bigint");

                    b.Property<double>("IgdbRating")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QvRating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Screenshots")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1020L,
                            IgdbId = 1020L,
                            IgdbRating = 89.821145750184655,
                            ImageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big/co2lbd.jpg",
                            IsReleased = true,
                            Name = "Grand Theft Auto V",
                            QvRating = 0,
                            ReleaseDate = new DateTime(2013, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Screenshots = "[\"//images.igdb.com/igdb/image/upload/t_screenshot_med/o7q3ikzmkjxbftrd64ok.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/vfdeo6kgu0o4cyzd0sng.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/eepecmqsq6uqxiaukar1.jpg\"]",
                            Summary = "Grand Theft Auto V is a vast open world game set in Los Santos, a sprawling sun-soaked metropolis struggling to stay afloat in an era of economic uncertainty and cheap reality TV. The game blends storytelling and gameplay in new ways as players repeatedly jump in and out of the lives of the game’s three lead characters, playing all sides of the game’s interwoven story.",
                            VideoUrl = "https://www.youtube.com/embed/QkkoHAzjnUs"
                        },
                        new
                        {
                            GameId = 1942L,
                            IgdbId = 1942L,
                            IgdbRating = 94.145056494292362,
                            ImageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big/co1wyy.jpg",
                            IsReleased = true,
                            Name = "The Witcher 3: Wild Hunt",
                            QvRating = 0,
                            ReleaseDate = new DateTime(2015, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Screenshots = "[\"//images.igdb.com/igdb/image/upload/t_screenshot_med/mnljdjtrh44x4snmierh.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/em1y2ugcwy2myuhvb9db.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/usxccsncekxg0wd1v6ee.jpg\"]",
                            Summary = "RPG and sequel to The Witcher 2 (2011), The Witcher 3 follows witcher Geralt of Rivia as he seeks out his former lover and his young subject while intermingling with the political workings of the wartorn Northern Kingdoms. Geralt has to fight monsters and deal with people of all sorts in order to solve complex problems and settle contentious disputes, each ranging from the personal to the world-changing.",
                            VideoUrl = "https://www.youtube.com/embed/5nLipy-Z4yo"
                        },
                        new
                        {
                            GameId = 72L,
                            IgdbId = 72L,
                            IgdbRating = 91.84852424624583,
                            ImageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big/co1rs4.jpg",
                            IsReleased = true,
                            Name = "Portal 2",
                            QvRating = 0,
                            ReleaseDate = new DateTime(2011, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Screenshots = "[\"//images.igdb.com/igdb/image/upload/t_screenshot_med/i9ys3zdhph1mh3futdit.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/rvrge8js7xnhr4z1vrbk.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/cmxaa4r52exlqvzwtxkh.jpg\"]",
                            Summary = "Sequel to the acclaimed Portal (2007), Portal 2 pits the protagonist of the original game, Chell, and her new robot friend, Wheatley, against more puzzles conceived by GLaDOS, an A.I. with the sole purpose of testing the Portal Gun's mechanics and taking revenge on Chell for the events of Portal. As a result of several interactions and revelations, Chell once again pushes to escape Aperture Science Labs.",
                            VideoUrl = "https://www.youtube.com/embed/mC_u9ZwlIUc"
                        },
                        new
                        {
                            GameId = 472L,
                            IgdbId = 472L,
                            IgdbRating = 87.69261829745183,
                            ImageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big/co1tnw.jpg",
                            IsReleased = true,
                            Name = "The Elder Scrolls V: Skyrim",
                            QvRating = 0,
                            ReleaseDate = new DateTime(2011, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Screenshots = "[\"//images.igdb.com/igdb/image/upload/t_screenshot_med/muv70yw3rds1cw8ymr5v.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/xzk2h41fiye7uwbhc6ub.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/urqw7ltwmhr39gkidsih.jpg\"]",
                            Summary = "Skyrim reimagines and revolutionizes the open-world fantasy epic, bringing to life a complete virtual world open for you to explore any way you choose. Play any type of character you can imagine, and do whatever you want; the legendary freedom of choice, storytelling, and adventure of The Elder Scrolls is realized like never before.",
                            VideoUrl = "https://www.youtube.com/embed/0mHGygvlKCQ"
                        },
                        new
                        {
                            GameId = 71L,
                            IgdbId = 71L,
                            IgdbRating = 86.778475392348398,
                            ImageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big/co1x7d.jpg",
                            IsReleased = true,
                            Name = "Portal",
                            QvRating = 0,
                            ReleaseDate = new DateTime(2007, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Screenshots = "[\"//images.igdb.com/igdb/image/upload/t_screenshot_med/x7pzfljardlljvtqcgv4.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/co2mtfe04a5iclqoo11c.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/oycbiasvmiewjxncqlgd.jpg\"]",
                            Summary = "Waking up in a seemingly empty laboratory, the player is made to complete various physics-based puzzle challenges through numerous test chambers in order to test out the new Aperture Science Handheld Portal Device, without an explanation as to how, why or by whom.",
                            VideoUrl = "https://www.youtube.com/embed/nA9ChSA6wV4"
                        },
                        new
                        {
                            GameId = 732L,
                            IgdbId = 732L,
                            IgdbRating = 90.589426824837233,
                            ImageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big/co2lb9.jpg",
                            IsReleased = true,
                            Name = "Grand Theft Auto: San Andreas",
                            QvRating = 0,
                            ReleaseDate = new DateTime(2004, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Screenshots = "[\"//images.igdb.com/igdb/image/upload/t_screenshot_med/sojdbdt93e06wojplpsj.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/hircn6ewsgu70ynlzis5.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/eswubyh9h3uereuyumjq.jpg\"]",
                            Summary = "Returning after his mother's murder to the semi-fictional city of Los Santos (based on Los Angeles), Carl Johnson, a former gang banger, must take back the streets for his family and friends by gaining respect and once again gaining control over the streets. However, a story filled with crime, lies and corruption will lead him to trudge the entire state of San Andreas (based on California and Nevada) to rebuild his life.",
                            VideoUrl = "https://www.youtube.com/embed/vdlpWZpwOq0"
                        },
                        new
                        {
                            GameId = 1009L,
                            IgdbId = 1009L,
                            IgdbRating = 93.377372650897513,
                            ImageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big/co1r7f.jpg",
                            IsReleased = true,
                            Name = "The Last of Us",
                            QvRating = 0,
                            ReleaseDate = new DateTime(2013, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Screenshots = "[\"//images.igdb.com/igdb/image/upload/t_screenshot_med/upogjfthdffjlzfi26xe.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/emvrwg5vhpfcmn9loxgu.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/kdt90b2rbx4tmewaxur9.jpg\"]",
                            Summary = "A third person shooter/stealth/survival hybrid, in which twenty years after the outbreak of a parasitic fungus which takes over the neural functions of humans, Joel, a Texan with a tragic familial past, finds himself responsible with smuggling a fourteen year old girl named Ellie to a militia group called the Fireflies, while avoiding strict and deadly authorities, infected fungal hosts and other violent survivors.",
                            VideoUrl = "https://www.youtube.com/embed/fxeNaDjU7sw"
                        },
                        new
                        {
                            GameId = 233L,
                            IgdbId = 233L,
                            IgdbRating = 90.659012483195042,
                            ImageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big/co1nmw.jpg",
                            IsReleased = true,
                            Name = "Half-Life 2",
                            QvRating = 0,
                            ReleaseDate = new DateTime(2004, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Screenshots = "[\"//images.igdb.com/igdb/image/upload/t_screenshot_med/mpphkihhk8yh9m2zaafd.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/muyxb9cljgsy245fcimx.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/nnlfbf8blflrlmuarfej.jpg\"]",
                            Summary = "1998. HALF-LIFE sends a shock through the game industry with its combination of pounding action and continuous, immersive storytelling.\n\nNOW. By taking the suspense, challenge and visceral charge of the original, and adding startling new realism and responsiveness, Half-Life 2 opens the door to a world where the player's presence affects everything around them, from the physical environment to the behaviors even the emotions of both friends and enemies.",
                            VideoUrl = "https://www.youtube.com/embed/ID1dWN3n7q4"
                        },
                        new
                        {
                            GameId = 20L,
                            IgdbId = 20L,
                            IgdbRating = 86.734430116136821,
                            ImageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big/co2mli.jpg",
                            IsReleased = true,
                            Name = "BioShock",
                            QvRating = 0,
                            ReleaseDate = new DateTime(2007, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Screenshots = "[\"//images.igdb.com/igdb/image/upload/t_screenshot_med/unvhwxrfzpjys4txfv4a.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/wworjqefsfzc9ouvrpxd.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/kjbwbdqemykovdzgidhu.jpg\"]",
                            Summary = "BioShock is a horror-themed first-person shooter set in a steampunk underwater dystopia. The player is urged to turn everything into a weapon: biologically modifying their own body with Plasmids, hacking devices and systems, upgrading their weapons, crafting new ammo variants, and experimenting with different battle techniques are all possible. The game is described by the developers as a spiritual successor to their previous PC title System Shock 2. BioShock received high praise in critical reviews for its atmospheric audio and visual quality, absorbing and original plot and its unique gaming experience.",
                            VideoUrl = "https://www.youtube.com/embed/CoYorK3E4aM"
                        },
                        new
                        {
                            GameId = 127L,
                            IgdbId = 127L,
                            IgdbRating = 86.909133880884752,
                            ImageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big/co1rcf.jpg",
                            IsReleased = true,
                            Name = "Assassin's Creed II",
                            QvRating = 0,
                            ReleaseDate = new DateTime(2009, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Screenshots = "[\"//images.igdb.com/igdb/image/upload/t_screenshot_med/wkagtolikjqalonaaixb.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/jbeteinfgsoxkoxv08i0.jpg\",\"//images.igdb.com/igdb/image/upload/t_screenshot_med/zvhehvzfakxb7aob8j7m.jpg\"]",
                            Summary = "Discover an intriguing and epic story of power, revenge and conspiracy set during a pivotal moment in history: the Italian Renaissance.\nExperience the freedom and immersion of an all new open world and mission structure with settings such as the rooftops and canals of beautiful Venice. Your options in combat, assassination and escape are vast, with many new weapons, settings and gameplay elements.",
                            VideoUrl = "https://www.youtube.com/embed/TcuEqTzRXl4"
                        });
                });

            modelBuilder.Entity("questvault.Models.GameCompany", b =>
                {
                    b.Property<long>("IgdbId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("IgdbCompanyId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("IgdbId", "IgdbCompanyId");

                    b.HasIndex("IgdbCompanyId");

                    b.ToTable("GameCompany");

                    b.HasData(
                        new
                        {
                            IgdbId = 1020L,
                            IgdbCompanyId = 29L
                        },
                        new
                        {
                            IgdbId = 1942L,
                            IgdbCompanyId = 50L
                        },
                        new
                        {
                            IgdbId = 72L,
                            IgdbCompanyId = 56L
                        },
                        new
                        {
                            IgdbId = 72L,
                            IgdbCompanyId = 1L
                        },
                        new
                        {
                            IgdbId = 472L,
                            IgdbCompanyId = 126L
                        },
                        new
                        {
                            IgdbId = 71L,
                            IgdbCompanyId = 56L
                        },
                        new
                        {
                            IgdbId = 71L,
                            IgdbCompanyId = 1L
                        },
                        new
                        {
                            IgdbId = 732L,
                            IgdbCompanyId = 29L
                        },
                        new
                        {
                            IgdbId = 233L,
                            IgdbCompanyId = 24L
                        },
                        new
                        {
                            IgdbId = 233L,
                            IgdbCompanyId = 56L
                        },
                        new
                        {
                            IgdbId = 20L,
                            IgdbCompanyId = 13L
                        },
                        new
                        {
                            IgdbId = 20L,
                            IgdbCompanyId = 8L
                        },
                        new
                        {
                            IgdbId = 127L,
                            IgdbCompanyId = 38L
                        },
                        new
                        {
                            IgdbId = 127L,
                            IgdbCompanyId = 104L
                        });
                });

            modelBuilder.Entity("questvault.Models.GameGenre", b =>
                {
                    b.Property<long>("IgdbId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("IgdbGenreId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("IgdbId", "IgdbGenreId");

                    b.HasIndex("IgdbGenreId");

                    b.ToTable("GameGenre");

                    b.HasData(
                        new
                        {
                            IgdbId = 1020L,
                            IgdbGenreId = 5L
                        },
                        new
                        {
                            IgdbId = 1020L,
                            IgdbGenreId = 10L
                        },
                        new
                        {
                            IgdbId = 1020L,
                            IgdbGenreId = 31L
                        },
                        new
                        {
                            IgdbId = 1942L,
                            IgdbGenreId = 12L
                        },
                        new
                        {
                            IgdbId = 1942L,
                            IgdbGenreId = 31L
                        },
                        new
                        {
                            IgdbId = 72L,
                            IgdbGenreId = 5L
                        },
                        new
                        {
                            IgdbId = 72L,
                            IgdbGenreId = 8L
                        },
                        new
                        {
                            IgdbId = 72L,
                            IgdbGenreId = 9L
                        },
                        new
                        {
                            IgdbId = 72L,
                            IgdbGenreId = 31L
                        },
                        new
                        {
                            IgdbId = 472L,
                            IgdbGenreId = 12L
                        },
                        new
                        {
                            IgdbId = 472L,
                            IgdbGenreId = 31L
                        },
                        new
                        {
                            IgdbId = 71L,
                            IgdbGenreId = 5L
                        },
                        new
                        {
                            IgdbId = 71L,
                            IgdbGenreId = 8L
                        },
                        new
                        {
                            IgdbId = 71L,
                            IgdbGenreId = 9L
                        },
                        new
                        {
                            IgdbId = 732L,
                            IgdbGenreId = 5L
                        },
                        new
                        {
                            IgdbId = 732L,
                            IgdbGenreId = 10L
                        },
                        new
                        {
                            IgdbId = 732L,
                            IgdbGenreId = 31L
                        },
                        new
                        {
                            IgdbId = 1009L,
                            IgdbGenreId = 5L
                        },
                        new
                        {
                            IgdbId = 1009L,
                            IgdbGenreId = 31L
                        },
                        new
                        {
                            IgdbId = 233L,
                            IgdbGenreId = 5L
                        },
                        new
                        {
                            IgdbId = 20L,
                            IgdbGenreId = 5L
                        },
                        new
                        {
                            IgdbId = 20L,
                            IgdbGenreId = 9L
                        },
                        new
                        {
                            IgdbId = 20L,
                            IgdbGenreId = 12L
                        },
                        new
                        {
                            IgdbId = 20L,
                            IgdbGenreId = 31L
                        },
                        new
                        {
                            IgdbId = 127L,
                            IgdbGenreId = 8L
                        },
                        new
                        {
                            IgdbId = 127L,
                            IgdbGenreId = 31L
                        });
                });

            modelBuilder.Entity("questvault.Models.GameLog", b =>
                {
                    b.Property<long>("GameLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GameLogId"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GamesLibraryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GamesLibraryId1")
                        .HasColumnType("bigint");

                    b.Property<int>("HoursPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Ownage")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<long>("review")
                        .HasColumnType("bigint");

                    b.HasKey("GameLogId");

                    b.HasIndex("GameId");

                    b.HasIndex("GamesLibraryId");

                    b.HasIndex("GamesLibraryId1");

                    b.ToTable("GameLog");
                });

            modelBuilder.Entity("questvault.Models.GamePlatform", b =>
                {
                    b.Property<long>("IgdbId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("IgdbPlatformId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("IgdbId", "IgdbPlatformId");

                    b.HasIndex("IgdbPlatformId");

                    b.ToTable("GamePlatform");

                    b.HasData(
                        new
                        {
                            IgdbId = 1020L,
                            IgdbPlatformId = 6L
                        },
                        new
                        {
                            IgdbId = 1020L,
                            IgdbPlatformId = 9L
                        },
                        new
                        {
                            IgdbId = 1020L,
                            IgdbPlatformId = 49L
                        },
                        new
                        {
                            IgdbId = 1942L,
                            IgdbPlatformId = 6L
                        },
                        new
                        {
                            IgdbId = 1942L,
                            IgdbPlatformId = 49L
                        },
                        new
                        {
                            IgdbId = 1942L,
                            IgdbPlatformId = 130L
                        },
                        new
                        {
                            IgdbId = 1942L,
                            IgdbPlatformId = 167L
                        },
                        new
                        {
                            IgdbId = 1942L,
                            IgdbPlatformId = 169L
                        },
                        new
                        {
                            IgdbId = 72L,
                            IgdbPlatformId = 3L
                        },
                        new
                        {
                            IgdbId = 72L,
                            IgdbPlatformId = 6L
                        },
                        new
                        {
                            IgdbId = 72L,
                            IgdbPlatformId = 9L
                        },
                        new
                        {
                            IgdbId = 72L,
                            IgdbPlatformId = 130L
                        },
                        new
                        {
                            IgdbId = 472L,
                            IgdbPlatformId = 6L
                        },
                        new
                        {
                            IgdbId = 472L,
                            IgdbPlatformId = 9L
                        },
                        new
                        {
                            IgdbId = 71L,
                            IgdbPlatformId = 3L
                        },
                        new
                        {
                            IgdbId = 71L,
                            IgdbPlatformId = 6L
                        },
                        new
                        {
                            IgdbId = 71L,
                            IgdbPlatformId = 9L
                        },
                        new
                        {
                            IgdbId = 71L,
                            IgdbPlatformId = 130L
                        },
                        new
                        {
                            IgdbId = 732L,
                            IgdbPlatformId = 6L
                        },
                        new
                        {
                            IgdbId = 732L,
                            IgdbPlatformId = 8L
                        },
                        new
                        {
                            IgdbId = 732L,
                            IgdbPlatformId = 9L
                        },
                        new
                        {
                            IgdbId = 732L,
                            IgdbPlatformId = 11L
                        },
                        new
                        {
                            IgdbId = 732L,
                            IgdbPlatformId = 39L
                        },
                        new
                        {
                            IgdbId = 1009L,
                            IgdbPlatformId = 9L
                        },
                        new
                        {
                            IgdbId = 233L,
                            IgdbPlatformId = 3L
                        },
                        new
                        {
                            IgdbId = 233L,
                            IgdbPlatformId = 6L
                        },
                        new
                        {
                            IgdbId = 233L,
                            IgdbPlatformId = 9L
                        },
                        new
                        {
                            IgdbId = 233L,
                            IgdbPlatformId = 11L
                        },
                        new
                        {
                            IgdbId = 20L,
                            IgdbPlatformId = 6L
                        },
                        new
                        {
                            IgdbId = 20L,
                            IgdbPlatformId = 9L
                        },
                        new
                        {
                            IgdbId = 127L,
                            IgdbPlatformId = 6L
                        },
                        new
                        {
                            IgdbId = 127L,
                            IgdbPlatformId = 9L
                        },
                        new
                        {
                            IgdbId = 127L,
                            IgdbPlatformId = 39L
                        });
                });

            modelBuilder.Entity("questvault.Models.GamesLibrary", b =>
                {
                    b.Property<long>("GamesLibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GamesLibraryId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GamesLibraryId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesLibrary");
                });

            modelBuilder.Entity("questvault.Models.Genre", b =>
                {
                    b.Property<long>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GenreId"));

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IgdbGenreId")
                        .HasColumnType("bigint");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 2L,
                            GenreName = "Point-and-click",
                            IgdbGenreId = 2L
                        },
                        new
                        {
                            GenreId = 4L,
                            GenreName = "Fighting",
                            IgdbGenreId = 4L
                        },
                        new
                        {
                            GenreId = 5L,
                            GenreName = "Shooter",
                            IgdbGenreId = 5L
                        },
                        new
                        {
                            GenreId = 7L,
                            GenreName = "Music",
                            IgdbGenreId = 7L
                        },
                        new
                        {
                            GenreId = 8L,
                            GenreName = "Platform",
                            IgdbGenreId = 8L
                        },
                        new
                        {
                            GenreId = 9L,
                            GenreName = "Puzzle",
                            IgdbGenreId = 9L
                        },
                        new
                        {
                            GenreId = 10L,
                            GenreName = "Racing",
                            IgdbGenreId = 10L
                        },
                        new
                        {
                            GenreId = 11L,
                            GenreName = "Real Time Strategy (RTS)",
                            IgdbGenreId = 11L
                        },
                        new
                        {
                            GenreId = 12L,
                            GenreName = "Role-playing (RPG)",
                            IgdbGenreId = 12L
                        },
                        new
                        {
                            GenreId = 13L,
                            GenreName = "Simulator",
                            IgdbGenreId = 13L
                        },
                        new
                        {
                            GenreId = 14L,
                            GenreName = "Sport",
                            IgdbGenreId = 14L
                        },
                        new
                        {
                            GenreId = 15L,
                            GenreName = "Strategy",
                            IgdbGenreId = 15L
                        },
                        new
                        {
                            GenreId = 16L,
                            GenreName = "Turn-based strategy (TBS)",
                            IgdbGenreId = 16L
                        },
                        new
                        {
                            GenreId = 24L,
                            GenreName = "Tactical",
                            IgdbGenreId = 24L
                        },
                        new
                        {
                            GenreId = 25L,
                            GenreName = "Hack and slash/Beat 'em up",
                            IgdbGenreId = 25L
                        },
                        new
                        {
                            GenreId = 26L,
                            GenreName = "Quiz/Trivia",
                            IgdbGenreId = 26L
                        },
                        new
                        {
                            GenreId = 30L,
                            GenreName = "Pinball",
                            IgdbGenreId = 30L
                        },
                        new
                        {
                            GenreId = 31L,
                            GenreName = "Adventure",
                            IgdbGenreId = 31L
                        },
                        new
                        {
                            GenreId = 32L,
                            GenreName = "Indie",
                            IgdbGenreId = 32L
                        },
                        new
                        {
                            GenreId = 33L,
                            GenreName = "Arcade",
                            IgdbGenreId = 33L
                        },
                        new
                        {
                            GenreId = 34L,
                            GenreName = "Visual Novel",
                            IgdbGenreId = 34L
                        },
                        new
                        {
                            GenreId = 35L,
                            GenreName = "Card & Board Game",
                            IgdbGenreId = 35L
                        },
                        new
                        {
                            GenreId = 36L,
                            GenreName = "MOBA",
                            IgdbGenreId = 36L
                        });
                });

            modelBuilder.Entity("questvault.Models.Platform", b =>
                {
                    b.Property<long>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PlatformId"));

                    b.Property<long>("IgdbPlatformId")
                        .HasColumnType("bigint");

                    b.Property<string>("PlatformName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlatformId");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            PlatformId = 6L,
                            IgdbPlatformId = 6L,
                            PlatformName = "PC (Microsoft Windows)"
                        },
                        new
                        {
                            PlatformId = 8L,
                            IgdbPlatformId = 8L,
                            PlatformName = "PlayStation 2"
                        },
                        new
                        {
                            PlatformId = 39L,
                            IgdbPlatformId = 39L,
                            PlatformName = "iOS"
                        },
                        new
                        {
                            PlatformId = 130L,
                            IgdbPlatformId = 130L,
                            PlatformName = "Nintendo Switch"
                        },
                        new
                        {
                            PlatformId = 11L,
                            IgdbPlatformId = 11L,
                            PlatformName = "Xbox"
                        },
                        new
                        {
                            PlatformId = 9L,
                            IgdbPlatformId = 9L,
                            PlatformName = "PlayStation 3"
                        },
                        new
                        {
                            PlatformId = 167L,
                            IgdbPlatformId = 167L,
                            PlatformName = "PlayStation 5"
                        },
                        new
                        {
                            PlatformId = 169L,
                            IgdbPlatformId = 169L,
                            PlatformName = "Xbox Series X|S"
                        },
                        new
                        {
                            PlatformId = 49L,
                            IgdbPlatformId = 49L,
                            PlatformName = "Xbox One"
                        },
                        new
                        {
                            PlatformId = 3L,
                            IgdbPlatformId = 3L,
                            PlatformName = "Linux"
                        });
                });

            modelBuilder.Entity("questvault.Models.TwoFactorAuthenticationTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("EmailTokens");
                });

            modelBuilder.Entity("questvault.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Clearance")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("questvault.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("questvault.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("questvault.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("questvault.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("questvault.Models.Friendship", b =>
                {
                    b.HasOne("questvault.Models.User", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("questvault.Models.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("questvault.Models.FriendshipRequest", b =>
                {
                    b.HasOne("questvault.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("questvault.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("questvault.Models.GameCompany", b =>
                {
                    b.HasOne("questvault.Models.Company", "Company")
                        .WithMany("GameCompanies")
                        .HasForeignKey("IgdbCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("questvault.Models.Game", "Game")
                        .WithMany("GameCompanies")
                        .HasForeignKey("IgdbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("questvault.Models.GameGenre", b =>
                {
                    b.HasOne("questvault.Models.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("IgdbGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("questvault.Models.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("IgdbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("questvault.Models.GameLog", b =>
                {
                    b.HasOne("questvault.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("questvault.Models.GamesLibrary", null)
                        .WithMany("GameLogs")
                        .HasForeignKey("GamesLibraryId");

                    b.HasOne("questvault.Models.GamesLibrary", null)
                        .WithMany("Top5Games")
                        .HasForeignKey("GamesLibraryId1");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("questvault.Models.GamePlatform", b =>
                {
                    b.HasOne("questvault.Models.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("IgdbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("questvault.Models.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("IgdbPlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("questvault.Models.GamesLibrary", b =>
                {
                    b.HasOne("questvault.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("questvault.Models.TwoFactorAuthenticationTokens", b =>
                {
                    b.HasOne("questvault.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("questvault.Models.Company", b =>
                {
                    b.Navigation("GameCompanies");
                });

            modelBuilder.Entity("questvault.Models.Game", b =>
                {
                    b.Navigation("GameCompanies");

                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("questvault.Models.GamesLibrary", b =>
                {
                    b.Navigation("GameLogs");

                    b.Navigation("Top5Games");
                });

            modelBuilder.Entity("questvault.Models.Genre", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("questvault.Models.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });
#pragma warning restore 612, 618
        }
    }
}
