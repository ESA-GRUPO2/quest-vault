// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using questvault.Data;

#nullable disable

namespace questvault.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("questvault.Models.Company", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1L,
                            CompanyName = "Electronic Arts"
                        },
                        new
                        {
                            CompanyId = 8L,
                            CompanyName = "2K Games"
                        },
                        new
                        {
                            CompanyId = 13L,
                            CompanyName = "Demiurge Studios"
                        },
                        new
                        {
                            CompanyId = 24L,
                            CompanyName = "Sierra Entertainment"
                        },
                        new
                        {
                            CompanyId = 29L,
                            CompanyName = "Rockstar Games"
                        },
                        new
                        {
                            CompanyId = 38L,
                            CompanyName = "Ubisoft Montreal"
                        },
                        new
                        {
                            CompanyId = 50L,
                            CompanyName = "WB Games"
                        },
                        new
                        {
                            CompanyId = 56L,
                            CompanyName = "Valve"
                        },
                        new
                        {
                            CompanyId = 104L,
                            CompanyName = "Ubisoft Entertainment"
                        },
                        new
                        {
                            CompanyId = 126L,
                            CompanyName = "Bethesda Game Studios"
                        });
                });

            modelBuilder.Entity("questvault.Models.Game", b =>
                {
                    b.Property<long>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GameId"));

                    b.Property<double>("IgdbRating")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("QvRating")
                        .HasColumnType("float");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1020L,
                            IgdbRating = 89.820973712227087,
                            Name = "Grand Theft Auto V",
                            QvRating = 0.0,
                            Summary = "Grand Theft Auto V is a vast open world game set in Los Santos, a sprawling sun-soaked metropolis struggling to stay afloat in an era of economic uncertainty and cheap reality TV. The game blends storytelling and gameplay in new ways as players repeatedly jump in and out of the lives of the game’s three lead characters, playing all sides of the game’s interwoven story.",
                            imageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big_2x/gtng284ejjted82pncis.jpg"
                        },
                        new
                        {
                            GameId = 1942L,
                            IgdbRating = 94.145534062906819,
                            Name = "The Witcher 3: Wild Hunt",
                            QvRating = 0.0,
                            Summary = "RPG and sequel to The Witcher 2 (2011), The Witcher 3 follows witcher Geralt of Rivia as he seeks out his former lover and his young subject while intermingling with the political workings of the wartorn Northern Kingdoms. Geralt has to fight monsters and deal with people of all sorts in order to solve complex problems and settle contentious disputes, each ranging from the personal to the world-changing.",
                            imageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big_2x/wljha2ztkh9uuoq3vqvr.jpg"
                        },
                        new
                        {
                            GameId = 72L,
                            IgdbRating = 91.84852424624583,
                            Name = "Portal 2",
                            QvRating = 0.0,
                            Summary = "Sequel to the acclaimed Portal (2007), Portal 2 pits the protagonist of the original game, Chell, and her new robot friend, Wheatley, against more puzzles conceived by GLaDOS, an A.I. with the sole purpose of testing the Portal Gun's mechanics and taking revenge on Chell for the events of Portal. As a result of several interactions and revelations, Chell once again pushes to escape Aperture Science Labs.",
                            imageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big_2x/arsj0.jpg"
                        },
                        new
                        {
                            GameId = 472L,
                            IgdbRating = 87.693564090508843,
                            Name = "The Elder Scrolls V: Skyrim",
                            QvRating = 0.0,
                            Summary = "Skyrim reimagines and revolutionizes the open-world fantasy epic, bringing to life a complete virtual world open for you to explore any way you choose. Play any type of character you can imagine, and do whatever you want; the legendary freedom of choice, storytelling, and adventure of The Elder Scrolls is realized like never before.",
                            imageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big_2x/snmb2kvu6uz2vr7uzgzp.jpg"
                        },
                        new
                        {
                            GameId = 71L,
                            IgdbRating = 86.778517641759336,
                            Name = "Portal",
                            QvRating = 0.0,
                            Summary = "Waking up in a seemingly empty laboratory, the player is made to complete various physics-based puzzle challenges through numerous test chambers in order to test out the new Aperture Science Handheld Portal Device, without an explanation as to how, why or by whom.",
                            imageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big_2x/ar21g0.jpg"
                        },
                        new
                        {
                            GameId = 732L,
                            IgdbRating = 90.589426824837233,
                            Name = "Grand Theft Auto: San Andreas",
                            QvRating = 0.0,
                            Summary = "Returning after his mother's murder to the semi-fictional city of Los Santos (based on Los Angeles), Carl Johnson, a former gang banger, must take back the streets for his family and friends by gaining respect and once again gaining control over the streets. However, a story filled with crime, lies and corruption will lead him to trudge the entire state of San Andreas (based on California and Nevada) to rebuild his life.",
                            imageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big_2x/arqzf.jpg"
                        },
                        new
                        {
                            GameId = 1009L,
                            IgdbRating = 93.378166330256974,
                            Name = "The Last of Us",
                            QvRating = 0.0,
                            Summary = "A third person shooter/stealth/survival hybrid, in which twenty years after the outbreak of a parasitic fungus which takes over the neural functions of humans, Joel, a Texan with a tragic familial past, finds himself responsible with smuggling a fourteen year old girl named Ellie to a militia group called the Fireflies, while avoiding strict and deadly authorities, infected fungal hosts and other violent survivors.",
                            imageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big_2x/wiqrk8nif7zntocaj9vf.jpg"
                        },
                        new
                        {
                            GameId = 233L,
                            IgdbRating = 90.659012483195042,
                            Name = "Half-Life 2",
                            QvRating = 0.0,
                            Summary = "1998. HALF-LIFE sends a shock through the game industry with its combination of pounding action and continuous, immersive storytelling.\n\nNOW. By taking the suspense, challenge and visceral charge of the original, and adding startling new realism and responsiveness, Half-Life 2 opens the door to a world where the player's presence affects everything around them, from the physical environment to the behaviors even the emotions of both friends and enemies.",
                            imageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big_2x/arkbf.jpg"
                        },
                        new
                        {
                            GameId = 20L,
                            IgdbRating = 86.738029894909729,
                            Name = "BioShock",
                            QvRating = 0.0,
                            Summary = "BioShock is a horror-themed first-person shooter set in a steampunk underwater dystopia. The player is urged to turn everything into a weapon: biologically modifying their own body with Plasmids, hacking devices and systems, upgrading their weapons, crafting new ammo variants, and experimenting with different battle techniques are all possible. The game is described by the developers as a spiritual successor to their previous PC title System Shock 2. BioShock received high praise in critical reviews for its atmospheric audio and visual quality, absorbing and original plot and its unique gaming experience.",
                            imageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big_2x/eviuwu4ipxp1qems0jzn.jpg"
                        },
                        new
                        {
                            GameId = 127L,
                            IgdbRating = 86.909133880884752,
                            Name = "Assassin's Creed II",
                            QvRating = 0.0,
                            Summary = "Discover an intriguing and epic story of power, revenge and conspiracy set during a pivotal moment in history: the Italian Renaissance.\nExperience the freedom and immersion of an all new open world and mission structure with settings such as the rooftops and canals of beautiful Venice. Your options in combat, assassination and escape are vast, with many new weapons, settings and gameplay elements.",
                            imageUrl = "//images.igdb.com/igdb/image/upload/t_cover_big_2x/twt8iqrsmp8zhvelwy1f.jpg"
                        });
                });

            modelBuilder.Entity("questvault.Models.GameCompany", b =>
                {
                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("GameId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("GameCompany");

                    b.HasData(
                        new
                        {
                            GameId = 1020L,
                            CompanyId = 29L
                        },
                        new
                        {
                            GameId = 1942L,
                            CompanyId = 50L
                        },
                        new
                        {
                            GameId = 72L,
                            CompanyId = 56L
                        },
                        new
                        {
                            GameId = 72L,
                            CompanyId = 1L
                        },
                        new
                        {
                            GameId = 472L,
                            CompanyId = 126L
                        },
                        new
                        {
                            GameId = 71L,
                            CompanyId = 56L
                        },
                        new
                        {
                            GameId = 71L,
                            CompanyId = 1L
                        },
                        new
                        {
                            GameId = 732L,
                            CompanyId = 29L
                        },
                        new
                        {
                            GameId = 233L,
                            CompanyId = 24L
                        },
                        new
                        {
                            GameId = 233L,
                            CompanyId = 56L
                        },
                        new
                        {
                            GameId = 20L,
                            CompanyId = 13L
                        },
                        new
                        {
                            GameId = 20L,
                            CompanyId = 8L
                        },
                        new
                        {
                            GameId = 127L,
                            CompanyId = 38L
                        },
                        new
                        {
                            GameId = 127L,
                            CompanyId = 104L
                        });
                });

            modelBuilder.Entity("questvault.Models.GameGenre", b =>
                {
                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");

                    b.HasData(
                        new
                        {
                            GameId = 1020L,
                            GenreId = 5L
                        },
                        new
                        {
                            GameId = 1020L,
                            GenreId = 10L
                        },
                        new
                        {
                            GameId = 1020L,
                            GenreId = 31L
                        },
                        new
                        {
                            GameId = 1942L,
                            GenreId = 12L
                        },
                        new
                        {
                            GameId = 1942L,
                            GenreId = 31L
                        },
                        new
                        {
                            GameId = 72L,
                            GenreId = 5L
                        },
                        new
                        {
                            GameId = 72L,
                            GenreId = 8L
                        },
                        new
                        {
                            GameId = 72L,
                            GenreId = 9L
                        },
                        new
                        {
                            GameId = 72L,
                            GenreId = 31L
                        },
                        new
                        {
                            GameId = 472L,
                            GenreId = 12L
                        },
                        new
                        {
                            GameId = 472L,
                            GenreId = 31L
                        },
                        new
                        {
                            GameId = 71L,
                            GenreId = 5L
                        },
                        new
                        {
                            GameId = 71L,
                            GenreId = 8L
                        },
                        new
                        {
                            GameId = 71L,
                            GenreId = 9L
                        },
                        new
                        {
                            GameId = 732L,
                            GenreId = 5L
                        },
                        new
                        {
                            GameId = 732L,
                            GenreId = 10L
                        },
                        new
                        {
                            GameId = 732L,
                            GenreId = 31L
                        },
                        new
                        {
                            GameId = 1009L,
                            GenreId = 5L
                        },
                        new
                        {
                            GameId = 1009L,
                            GenreId = 31L
                        },
                        new
                        {
                            GameId = 233L,
                            GenreId = 5L
                        },
                        new
                        {
                            GameId = 20L,
                            GenreId = 5L
                        },
                        new
                        {
                            GameId = 20L,
                            GenreId = 9L
                        },
                        new
                        {
                            GameId = 20L,
                            GenreId = 12L
                        },
                        new
                        {
                            GameId = 20L,
                            GenreId = 31L
                        },
                        new
                        {
                            GameId = 127L,
                            GenreId = 8L
                        },
                        new
                        {
                            GameId = 127L,
                            GenreId = 31L
                        });
                });

            modelBuilder.Entity("questvault.Models.GamePlatform", b =>
                {
                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("PlatformId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatform");

                    b.HasData(
                        new
                        {
                            GameId = 1020L,
                            PlatformId = 6L
                        },
                        new
                        {
                            GameId = 1020L,
                            PlatformId = 9L
                        },
                        new
                        {
                            GameId = 1020L,
                            PlatformId = 49L
                        },
                        new
                        {
                            GameId = 1942L,
                            PlatformId = 6L
                        },
                        new
                        {
                            GameId = 1942L,
                            PlatformId = 49L
                        },
                        new
                        {
                            GameId = 1942L,
                            PlatformId = 130L
                        },
                        new
                        {
                            GameId = 1942L,
                            PlatformId = 167L
                        },
                        new
                        {
                            GameId = 1942L,
                            PlatformId = 169L
                        },
                        new
                        {
                            GameId = 72L,
                            PlatformId = 3L
                        },
                        new
                        {
                            GameId = 72L,
                            PlatformId = 6L
                        },
                        new
                        {
                            GameId = 72L,
                            PlatformId = 9L
                        },
                        new
                        {
                            GameId = 72L,
                            PlatformId = 130L
                        },
                        new
                        {
                            GameId = 472L,
                            PlatformId = 6L
                        },
                        new
                        {
                            GameId = 472L,
                            PlatformId = 9L
                        },
                        new
                        {
                            GameId = 71L,
                            PlatformId = 3L
                        },
                        new
                        {
                            GameId = 71L,
                            PlatformId = 6L
                        },
                        new
                        {
                            GameId = 71L,
                            PlatformId = 9L
                        },
                        new
                        {
                            GameId = 71L,
                            PlatformId = 130L
                        },
                        new
                        {
                            GameId = 732L,
                            PlatformId = 6L
                        },
                        new
                        {
                            GameId = 732L,
                            PlatformId = 8L
                        },
                        new
                        {
                            GameId = 732L,
                            PlatformId = 9L
                        },
                        new
                        {
                            GameId = 732L,
                            PlatformId = 11L
                        },
                        new
                        {
                            GameId = 732L,
                            PlatformId = 39L
                        },
                        new
                        {
                            GameId = 1009L,
                            PlatformId = 9L
                        },
                        new
                        {
                            GameId = 233L,
                            PlatformId = 3L
                        },
                        new
                        {
                            GameId = 233L,
                            PlatformId = 6L
                        },
                        new
                        {
                            GameId = 233L,
                            PlatformId = 9L
                        },
                        new
                        {
                            GameId = 233L,
                            PlatformId = 11L
                        },
                        new
                        {
                            GameId = 20L,
                            PlatformId = 6L
                        },
                        new
                        {
                            GameId = 20L,
                            PlatformId = 9L
                        },
                        new
                        {
                            GameId = 127L,
                            PlatformId = 6L
                        },
                        new
                        {
                            GameId = 127L,
                            PlatformId = 9L
                        },
                        new
                        {
                            GameId = 127L,
                            PlatformId = 39L
                        });
                });

            modelBuilder.Entity("questvault.Models.Genre", b =>
                {
                    b.Property<long>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GenreId"));

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 2L,
                            GenreName = "Point-and-click"
                        },
                        new
                        {
                            GenreId = 4L,
                            GenreName = "Fighting"
                        },
                        new
                        {
                            GenreId = 5L,
                            GenreName = "Shooter"
                        },
                        new
                        {
                            GenreId = 7L,
                            GenreName = "Music"
                        },
                        new
                        {
                            GenreId = 8L,
                            GenreName = "Platform"
                        },
                        new
                        {
                            GenreId = 9L,
                            GenreName = "Puzzle"
                        },
                        new
                        {
                            GenreId = 10L,
                            GenreName = "Racing"
                        },
                        new
                        {
                            GenreId = 11L,
                            GenreName = "Real Time Strategy (RTS)"
                        },
                        new
                        {
                            GenreId = 12L,
                            GenreName = "Role-playing (RPG)"
                        },
                        new
                        {
                            GenreId = 13L,
                            GenreName = "Simulator"
                        },
                        new
                        {
                            GenreId = 14L,
                            GenreName = "Sport"
                        },
                        new
                        {
                            GenreId = 15L,
                            GenreName = "Strategy"
                        },
                        new
                        {
                            GenreId = 16L,
                            GenreName = "Turn-based strategy (TBS)"
                        },
                        new
                        {
                            GenreId = 24L,
                            GenreName = "Tactical"
                        },
                        new
                        {
                            GenreId = 25L,
                            GenreName = "Hack and slash/Beat 'em up"
                        },
                        new
                        {
                            GenreId = 26L,
                            GenreName = "Quiz/Trivia"
                        },
                        new
                        {
                            GenreId = 30L,
                            GenreName = "Pinball"
                        },
                        new
                        {
                            GenreId = 31L,
                            GenreName = "Adventure"
                        },
                        new
                        {
                            GenreId = 32L,
                            GenreName = "Indie"
                        },
                        new
                        {
                            GenreId = 33L,
                            GenreName = "Arcade"
                        },
                        new
                        {
                            GenreId = 34L,
                            GenreName = "Visual Novel"
                        },
                        new
                        {
                            GenreId = 35L,
                            GenreName = "Card & Board Game"
                        },
                        new
                        {
                            GenreId = 36L,
                            GenreName = "MOBA"
                        });
                });

            modelBuilder.Entity("questvault.Models.Platform", b =>
                {
                    b.Property<long>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PlatformId"));

                    b.Property<string>("PlatformName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlatformId");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            PlatformId = 6L,
                            PlatformName = "PC (Microsoft Windows)"
                        },
                        new
                        {
                            PlatformId = 8L,
                            PlatformName = "PlayStation 2"
                        },
                        new
                        {
                            PlatformId = 39L,
                            PlatformName = "iOS"
                        },
                        new
                        {
                            PlatformId = 130L,
                            PlatformName = "Nintendo Switch"
                        },
                        new
                        {
                            PlatformId = 11L,
                            PlatformName = "Xbox"
                        },
                        new
                        {
                            PlatformId = 9L,
                            PlatformName = "PlayStation 3"
                        },
                        new
                        {
                            PlatformId = 167L,
                            PlatformName = "PlayStation 5"
                        },
                        new
                        {
                            PlatformId = 169L,
                            PlatformName = "Xbox Series X|S"
                        },
                        new
                        {
                            PlatformId = 49L,
                            PlatformName = "Xbox One"
                        },
                        new
                        {
                            PlatformId = 3L,
                            PlatformName = "Linux"
                        });
                });

            modelBuilder.Entity("questvault.Models.TwoFactorAuthenticationTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("EmailTokens");
                });

            modelBuilder.Entity("questvault.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Clearance")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("questvault.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("questvault.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("questvault.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("questvault.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("questvault.Models.GameCompany", b =>
                {
                    b.HasOne("questvault.Models.Company", "Company")
                        .WithMany("GameCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("questvault.Models.Game", "Game")
                        .WithMany("GameCompanies")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("questvault.Models.GameGenre", b =>
                {
                    b.HasOne("questvault.Models.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("questvault.Models.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("questvault.Models.GamePlatform", b =>
                {
                    b.HasOne("questvault.Models.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("questvault.Models.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("questvault.Models.TwoFactorAuthenticationTokens", b =>
                {
                    b.HasOne("questvault.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("questvault.Models.Company", b =>
                {
                    b.Navigation("GameCompanies");
                });

            modelBuilder.Entity("questvault.Models.Game", b =>
                {
                    b.Navigation("GameCompanies");

                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("questvault.Models.Genre", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("questvault.Models.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });
#pragma warning restore 612, 618
        }
    }
}
